The 2D-Nim board game is played on a grid, with pieces on the grid points. On each move, a player may remove any positive number of contiguous pieces in any row or column. The player who removes the last piece wins.
For purposes of writing 2D-Nim-playing software, a certain programmer wants to be able to tell whether or not a certain position has ever been analyzed previously. Because of the rules of 2D-Nim, it should be clear that the two boards above are essentially equivalent. That is, if there is a winning strategy for the left board, the same one must apply to the right board. The fact that the contiguous groups of pieces appear in different places and orientations is clearly irrelevant. All that matters is that the same clusters of pieces (a cluster being a set of contiguous pieces that can be reached from each other by a sequence of one-square vertical or horizontal moves) appear in each. For example, the cluster of pieces (A,B,C,F,G) appears on both boards, but it has been reflected (swapping left and right), rotated, and moved. Your task is to determine whether two given board states are equivalent in this sense or not.

To verify if the clusters from board b1 are isomorphic (have the same canonical representation considering rotations and reflections) to the clusters in b2, we'll follow these steps:

Modify DFS to collect coordinates: Instead of piece IDs, the DFS should collect the (row, column) coordinates of each piece in a cluster.
Find all clusters: Use the modified DFS to find all distinct clusters of coordinates for both board1 and board2.
Generate Canonical Representation for each cluster:
For each cluster (a list of coordinates):
Normalize: Translate the cluster's coordinates so its top-most, then left-most point is at (0,0). Sort these relative coordinates.
Generate Symmetries: Create all 8 symmetries (original, 3 rotations, and these 4 flipped/reflected and then re-normalized and sorted).
Select Lexicographically Smallest: Convert each of these 8 normalized, sorted coordinate lists into a string. The canonical representation is the lexicographically smallest of these strings.
Compare Canonical Representations:
Store the counts of each canonical string for clusters from board1 in a map.
Store the counts of each canonical string for clusters from board2 in another map.
If the two maps are identical (same canonical forms with the same frequencies), the boards are equivalent ("YES"). Otherwise, they are not ("NO")